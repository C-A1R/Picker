#include "FileSystemWidget.h"

#include <QToolBar>
#include <QListView>
#include <QShortcut>
#include <QVBoxLayout>

#include "FileSystemModel.h"

FileSystemWidget::FileSystemWidget(QWidget *parent)
    : QWidget(parent)
{
    initUi();
    initDriveActions();
    connect(fileSystem_listView, &QListView::doubleClicked, this, &FileSystemWidget::slot_goIn);
    new QShortcut(QKeySequence(Qt::Key_Backspace), this, SLOT(slot_goUp()));
}

void FileSystemWidget::initUi()
{
    drivePanel = new QToolBar(this);
    drivePanel->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);

    fileSystem_listView = new QListView(this);
    fileSystem_listView->setAlternatingRowColors(true);
    model = new FileSystemModel(this);
    fileSystem_listView->setModel(model);

    auto main_vLay = new QVBoxLayout();
    main_vLay->setContentsMargins(0, 0, 0, 0);
    main_vLay->setSpacing(0);
    main_vLay->addWidget(drivePanel);
    main_vLay->addWidget(fileSystem_listView);
    setLayout(main_vLay);
}

void FileSystemWidget::initDriveActions()
{
    const QFileInfoList drives = QDir::drives();
    if (drives.empty())
    {
        return;
    }
    model->setRootPath(drives.first().path());
    fileSystem_listView->setRootIndex(model->index(drives.first().path()));
    for (const QFileInfo &drive : drives)
    {
        auto action = new QAction(drive.path(), drivePanel);
        action->setIcon(model->fileIcon(model->index(drive.path())));
        action->setIconText(drive.path());
        action->setCheckable(true);
        connect(action, &QAction::triggered, this, &FileSystemWidget::slot_changeDrive);
        drivePanel->addAction(action);
    }
}

void FileSystemWidget::slot_goIn(const QModelIndex &index)
{
    if (model->isDir(index))
    {
        fileSystem_listView->setRootIndex(index);
    }
}

void FileSystemWidget::slot_goUp()
{
    fileSystem_listView->setRootIndex(fileSystem_listView->rootIndex().parent());
}

void FileSystemWidget::slot_changeDrive()
{
    for (QAction *act : drivePanel->actions())
    {
        act->setChecked(false);
    }
    auto act = static_cast<QAction *>(sender());
    act->setChecked(true);
    model->setRootPath(act->text());
    fileSystem_listView->setRootIndex(model->index(act->text()));
}
